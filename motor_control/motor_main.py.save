from robot_hat import Pin, Ultrasonic, Grayscale_Module, ADC
from picarx import Picarx
import time
import keyboard

px = Picarx()
grayscale = Grayscale_Module(ADC(0), ADC(1), ADC(2), reference=2000)

# ⚙️ GÜNCELLENMİŞ AYARLAR
STEERING_OFFSET = -9              # Direksiyon sola kayık → sağa çekiyoruz
GRAYSCALE_THRESHOLD = 100         # Boşluk algılamak için hassas eşik
ULTRASONIC_THRESHOLD = 20         # 10 cm'den yakınsa engel kabul edilir

# 🔧 Direksiyon fonksiyonu
def steer(angle):
    px.set_dir_servo_angle(angle + STEERING_OFFSET)

# 🔍 Engel kontrolü + log
def engel_var_mi():
    distance = px.ultrasonic.read()

    if distance is None:
        print("⚠️ Ultrasonik ölçüm hatası (None)")
        return False
    elif distance < 0:
        print(f"⚠️ Ultrasonik geçersiz ölçüm: {distance}")
        return False
    elif distance < ULTRASONIC_THRESHOLD:
        print(f"🚧 Gerçek engel algılandı: {distance:.2f} cm")
        return True
    return False

# 🔍 Boşluk (uçurum) kontrolü + log
def bosluk_var_mi():
    left = grayscale.read(grayscale.LEFT)
    middle = grayscale.read(grayscale.MIDDLE)
    right = grayscale.read(grayscale.RIGHT)
    print(f"🎛️ Grayscale L:{left:.0f} M:{middle:.0f} R:{right:.0f}")

    if left < GRAYSCALE_THRESHOLD or middle < GRAYSCALE_THRESHOLD or right < GRAYSCALE_THRESHOLD:
        print("🕳️ Boşluk (beyaz yüzey) algılandı!")
        return True
    return False

# 🧠 Başlangıç
print("🧠 Sistem çalışıyor. 'w' ile ileri, 's' ile geri. Tehlikede ileri engellenir.")

try:
    while True:
        tehlike_ultrasonik = engel_var_mi()
        tehlike_grayscale = bosluk_var_mi()
        tehlike = tehlike_ultrasonik or tehlike_grayscale

        # Direksiyon
        if keyboard.is_pressed('a'):
            steer(-30)
        elif keyboard.is_pressed('d'):
            steer(30)
        else:
            steer(0)

        # Hareket
        if keyboard.is_pressed('w') and not tehlike:
            px.forward(30)
        elif keyboard.is_pressed('s'):
            px.backward(30)
        else:
            px.stop()

        # Çıkış
        if keyboard.is_pressed('q'):
            px.stop()
            print("🛑 Çıkış yapıldı.")
            break

        time.sleep(0.05)

except KeyboardInterrupt:
    px.stop()
    print("\n🛑 Manuel durduruldu.")
