from robot_hat import Pin, Ultrasonic, Grayscale_Module, ADC
from picarx import Picarx
import time
import keyboard

px = Picarx()
grayscale = Grayscale_Module(ADC(0), ADC(1), ADC(2), reference=2000)

STEERING_OFFSET = -9
GRAYSCALE_THRESHOLD = 100
ULTRASONIC_THRESHOLD = 10

# üé• Kamera a√ßƒ±larƒ±

def steer(angle):
    px.set_dir_servo_angle(angle + STEERING_OFFSET)

def engel_var_mi():
    distance = px.ultrasonic.read()
    if distance is None:
        print("‚ö†Ô∏è Ultrasonik √∂l√ß√ºm hatasƒ± (None)")
        return False
    elif distance < 0:
        print(f"‚ö†Ô∏è Ultrasonik ge√ßersiz √∂l√ß√ºm: {distance}")
        return False
    elif distance < ULTRASONIC_THRESHOLD:
        print(f"üöß Ger√ßek engel algƒ±landƒ±: {distance:.2f} cm")
        return True
    return False

def bosluk_var_mi():
    left = grayscale.read(grayscale.LEFT)
    middle = grayscale.read(grayscale.MIDDLE)
    right = grayscale.read(grayscale.RIGHT)
    print(f"üéõÔ∏è Grayscale L:{left:.0f} M:{middle:.0f} R:{right:.0f}")

    if left < GRAYSCALE_THRESHOLD or middle < GRAYSCALE_THRESHOLD or right < GRAYSCALE_THRESHOLD:
        print("üï≥Ô∏è Bo≈üluk (beyaz y√ºzey) algƒ±landƒ±!")
        return True
    return False

print("üß† Sistem ba≈üladƒ±. 'w/s/a/d' hareket, 'i/k/j/l' kamera, 'q' √ßƒ±kƒ±≈ü.")

try:
    while True:
        tehlike = engel_var_mi() or bosluk_var_mi()

        # üöó Direksiyon kontrol
        if keyboard.is_pressed('a'):
            steer(-30)
        elif keyboard.is_pressed('d'):
            steer(30)
        else:
            steer(0)

        # üöó Hareket
        if keyboard.is_pressed('w') and not tehlike:
            px.forward(30)
        elif keyboard.is_pressed('s'):
            px.backward(30)
        else:
            px.stop()

        # üé• Kamera kontrol
        if keyboard.is_pressed('i'):
            tilt_angle = min(MAX_ANGLE, tilt_angle + 1)
        elif keyboard.is_pressed('k'):
            tilt_angle = max(-MAX_ANGLE, tilt_angle - 1)
        if keyboard.is_pressed('j'):
            pan_angle = max(-MAX_ANGLE, pan_angle - 1)
        elif keyboard.is_pressed('l'):
            pan_angle = min(MAX_ANGLE, pan_angle + 1)

        px.set_cam_pan_angle(pan_angle)
        px.set_cam_tilt_angle(tilt_angle)

        # üîö √áƒ±kƒ±≈ü
        if keyboard.is_pressed('q'):
            px.stop()
            print("üõë √áƒ±kƒ±≈ü yapƒ±ldƒ±.")
            break

        time.sleep(0.05)

except KeyboardInterrupt:
    px.stop()
    print("\nüõë Manuel durduruldu.")
